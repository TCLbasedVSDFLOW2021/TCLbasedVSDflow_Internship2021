Qflow synthesis logfile created on Wednesday 10 February 2021 07:01:21 PM IST
Running yosys for verilog parsing and synthesis
yosys  -s spi_slave.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `spi_slave.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v
Parsing Verilog input from `/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v' to AST representation.
Generating RTLIL representation for module `\spi_slave'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \spi_slave

3.1.2. Analyzing design hierarchy..
Top module:  \spi_slave
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10 in module spi_slave.
Marked 5 switch rules as full_case in process $proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3 in module spi_slave.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \CSB in `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
Found async reset \CSB in `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
     1/8: $0\predata[6:0]
     2/8: $0\fixed[2:0]
     3/8: $0\readmode[0:0]
     4/8: $0\writemode[0:0]
     5/8: $0\count[2:0]
     6/8: $0\state[1:0]
     7/8: $0\addr[7:0]
     8/8: $0\rdstb[0:0]
Creating decoders for process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3'.
     1/3: $0\ldata[7:0]
     2/3: $0\wrstb[0:0]
     3/3: $0\sdoenb[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\spi_slave.\rdstb' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$171' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\addr' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$172' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\state' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$173' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\count' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$174' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\writemode' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$175' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\readmode' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$176' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\fixed' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$177' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\predata' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
  created $adff cell `$procdff$178' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\sdoenb' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3'.
  created $adff cell `$procdff$179' with negative edge clock and positive level reset.
Creating register for signal `\spi_slave.\wrstb' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3'.
  created $adff cell `$procdff$180' with negative edge clock and positive level reset.
Creating register for signal `\spi_slave.\ldata' using process `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3'.
  created $adff cell `$procdff$181' with negative edge clock and positive level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 12 empty switches in `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
Removing empty process `spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:77$10'.
Found and cleaned up 5 empty switches in `\spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3'.
Removing empty process `spi_slave.$proc$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:38$3'.
Cleaned up 17 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.
<suppressed ~9 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 0 unused cells and 67 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module spi_slave..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
    New ctrl vector for $mux cell $procmux$117: { }
  Optimizing cells in module \spi_slave.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell spi_slave.$eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:95$15 ($eq).
Removed top 1 bits (of 2) from port B of cell spi_slave.$eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:102$18 ($eq).
Removed top 31 bits (of 32) from port B of cell spi_slave.$add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:103$19 ($add).
Removed top 29 bits (of 32) from port Y of cell spi_slave.$add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:103$19 ($add).
Removed top 2 bits (of 3) from port B of cell spi_slave.$eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:117$25 ($eq).
Removed top 31 bits (of 32) from port B of cell spi_slave.$sub$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:120$27 ($sub).
Removed top 29 bits (of 32) from port Y of cell spi_slave.$sub$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:120$27 ($sub).
Removed top 31 bits (of 32) from port B of cell spi_slave.$add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:121$28 ($add).
Removed top 24 bits (of 32) from port Y of cell spi_slave.$add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:121$28 ($add).
Removed top 29 bits (of 32) from wire spi_slave.$add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:103$19_Y.
Removed top 24 bits (of 32) from wire spi_slave.$add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:121$28_Y.
Removed top 29 bits (of 32) from wire spi_slave.$sub$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:120$27_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~84 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spi_slave:
  creating $macc model for $add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:103$19 ($add).
  creating $macc model for $add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:121$28 ($add).
  creating $macc model for $sub$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:120$27 ($sub).
  creating $alu model for $macc $sub$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:120$27.
  creating $alu model for $macc $add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:121$28.
  creating $alu model for $macc $add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:103$19.
  creating $alu model for $lt$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:97$16 ($lt): new $alu
  creating $alu cell for $lt$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:97$16: $auto$alumacc.cc:474:replace_alu$186
  creating $alu cell for $add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:103$19: $auto$alumacc.cc:474:replace_alu$191
  creating $alu cell for $add$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:121$28: $auto$alumacc.cc:474:replace_alu$194
  creating $alu cell for $sub$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:120$27: $auto$alumacc.cc:474:replace_alu$197
  created 4 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.
<suppressed ~2 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register spi_slave.state.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\spi_slave'.
  found $adff cell for state register: $procdff$173
  root of input selection tree: $0\state[1:0]
  found reset state: 2'00 (from async reset)
  found ctrl input: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:90$12_Y
  found ctrl input: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:102$18_Y
  found ctrl input: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:113$22_Y
  found ctrl input: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:105$20_Y
  found ctrl input: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:117$25_Y
  found state code: 2'10
  found ctrl input: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:50$7_Y
  found ctrl input: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:95$15_Y
  found ctrl input: $auto$alumacc.cc:491:replace_alu$188 [2]
  found state code: 2'01
  found ctrl output: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:90$12_Y
  found ctrl output: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:102$18_Y
  found ctrl output: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:113$22_Y
  ctrl inputs: { $auto$alumacc.cc:491:replace_alu$188 [2] $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:105$20_Y $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:117$25_Y $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:95$15_Y $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:50$7_Y }
  ctrl outputs: { $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:113$22_Y $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:102$18_Y $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:90$12_Y $0\state[1:0] }
  transition:       2'00 5'0--00 ->       2'00 5'00100
  transition:       2'00 5'10-00 ->       2'00 5'00100
  transition:       2'00 5'11-00 ->       2'01 5'00101
  transition:       2'00 5'---10 ->       2'00 5'00100
  transition:       2'00 5'----1 ->       2'00 5'00100
  transition:       2'10 5'-0--- ->       2'10 5'10010
  transition:       2'10 5'-10-- ->       2'10 5'10010
  transition:       2'10 5'-11-- ->       2'00 5'10000
  transition:       2'01 5'-0--- ->       2'01 5'01001
  transition:       2'01 5'-1--- ->       2'10 5'01010

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$200' from module `\spi_slave'.

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 14 unused cells and 14 unused wires.
<suppressed ~15 debug messages>

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$200' from module `\spi_slave'.
  Removing unused output signal $0\state[1:0] [0].
  Removing unused output signal $0\state[1:0] [1].

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$200' from module `\spi_slave' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$200' from module `\spi_slave':
-------------------------------------

  Information on FSM $fsm$\state$200 (\state):

  Number of input signals:    5
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:50$7_Y
    1: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:95$15_Y
    2: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:117$25_Y
    3: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:105$20_Y
    4: $auto$alumacc.cc:491:replace_alu$188 [2]

  Output signals:
    0: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:90$12_Y
    1: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:102$18_Y
    2: $eq$/home/ayush/vsdflow/outdir_spi_slave/source/spi_slave.v:113$22_Y

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 5'10-00   ->     0 3'001
      1:     0 5'0--00   ->     0 3'001
      2:     0 5'---10   ->     0 3'001
      3:     0 5'----1   ->     0 3'001
      4:     0 5'11-00   ->     2 3'001
      5:     1 5'-11--   ->     0 3'100
      6:     1 5'-10--   ->     1 3'100
      7:     1 5'-0---   ->     1 3'100
      8:     2 5'-1---   ->     1 3'010
      9:     2 5'-0---   ->     2 3'010

-------------------------------------

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$200' from module `\spi_slave'.

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.
<suppressed ~5 debug messages>

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.
<suppressed ~7 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$242: { $auto$fsm_map.cc:118:implement_pattern_cache$232 $auto$fsm_map.cc:118:implement_pattern_cache$240 $auto$fsm_map.cc:118:implement_pattern_cache$236 }
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$229: { $auto$fsm_map.cc:118:implement_pattern_cache$211 $auto$fsm_map.cc:118:implement_pattern_cache$227 $auto$fsm_map.cc:118:implement_pattern_cache$219 $auto$fsm_map.cc:118:implement_pattern_cache$223 $auto$fsm_map.cc:118:implement_pattern_cache$215 }
  Optimizing cells in module \spi_slave.
Performed a total of 2 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~419 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.
<suppressed ~135 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 19 unused cells and 146 unused wires.
<suppressed ~20 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\spi_slave' to `<abc-temp-dir>/input.blif'..
Extracted 227 gates and 274 wires to a netlist network with 45 inputs and 45 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               MUX cells:      130
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       10
ABC RESULTS:              OAI3 cells:        7
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:       10
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:      184
ABC RESULTS:           input signals:       45
ABC RESULTS:          output signals:       45
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.
<suppressed ~35 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 1 unused cells and 176 unused wires.
<suppressed ~2 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \spi_slave

3.25.2. Analyzing design hierarchy..
Top module:  \spi_slave
Removed 0 unused modules.

3.26. Printing statistics.

=== spi_slave ===

   Number of wires:                180
   Number of wire bits:            251
   Number of public wires:          18
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                231
     $_ANDNOT_                      11
     $_AND_                          1
     $_AOI3_                         2
     $_DFF_NP0_                      9
     $_DFF_NP1_                      1
     $_DFF_PP0_                     26
     $_DFF_PP1_                      1
     $_MUX_                        130
     $_NAND_                         5
     $_NOR_                          1
     $_NOT_                          9
     $_OAI3_                         7
     $_OAI4_                         2
     $_ORNOT_                        4
     $_OR_                          10
     $_XNOR_                         5
     $_XOR_                          7

3.27. Executing CHECK pass (checking for obvious problems).
checking module spi_slave..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\spi_slave':
  mapped 9 $_DFF_NP0_ cells to \DFFSR cells.
  mapped 1 $_DFF_NP1_ cells to \DFFSR cells.
  mapped 26 $_DFF_PP0_ cells to \DFFSR cells.
  mapped 1 $_DFF_PP1_ cells to \DFFSR cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
<suppressed ~135 debug messages>
Removed a total of 45 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 0 unused cells and 45 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\spi_slave' to `<abc-temp-dir>/input.blif'..
Extracted 196 gates and 243 wires to a netlist network with 47 inputs and 47 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        9
ABC RESULTS:           AOI21X1 cells:       18
ABC RESULTS:           AOI22X1 cells:        6
ABC RESULTS:             INVX1 cells:       35
ABC RESULTS:            MUX2X1 cells:       14
ABC RESULTS:           NAND2X1 cells:       29
ABC RESULTS:           NAND3X1 cells:       11
ABC RESULTS:            NOR2X1 cells:       20
ABC RESULTS:            NOR3X1 cells:        4
ABC RESULTS:           OAI21X1 cells:       42
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:      149
ABC RESULTS:           input signals:       47
ABC RESULTS:          output signals:       47
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 244 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port spi_slave.CSB: Missing option -inpad.
Don't map input port spi_slave.SCK: Missing option -inpad.
Don't map input port spi_slave.SDI: Missing option -inpad.
Mapping port spi_slave.SDO using BUFX2.
Don't map input port spi_slave.idata: Missing option -inpad.
Mapping port spi_slave.oaddr using BUFX2.
Mapping port spi_slave.odata using BUFX2.
Mapping port spi_slave.rdstb using BUFX2.
Mapping port spi_slave.sdoenb using BUFX2.
Mapping port spi_slave.wrstb using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_slave..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_slave.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_slave'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_slave..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_slave.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== spi_slave ===

   Number of wires:                184
   Number of wire bits:            263
   Number of public wires:         184
   Number of public wire bits:     263
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                251
     AND2X2                          9
     AOI21X1                        18
     AOI22X1                         6
     BUFX2                          20
     DFFSR                          37
     INVX1                          35
     MUX2X1                         14
     NAND2X1                        29
     NAND3X1                        11
     NOR2X1                         20
     NOR3X1                          4
     OAI21X1                        42
     OAI22X1                         2
     OR2X2                           2
     XNOR2X1                         1
     XOR2X1                          1

End of script. Logfile hash: fab99a3447
CPU: user 0.28s system 0.01s, MEM: 18.67 MB total, 12.84 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 20x opt_clean (0 sec), 14% 20x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl spi_slave_mapped.blif spi_slave /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I spi_slave_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif spi_slave.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 37 (load 955.851) from node _13_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 16.3073 (latency = 1630.73 ps)
Top input node fanout is 28 (load 262.453) from node SCK.
Warning 1: load of 75.9733 is 1.30556 times greater than strongest gate NOR2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 6: load of 84.1899 is 1.44163 times greater than strongest gate NAND2X1
Warning 7: load of 109.319 is 1.87193 times greater than strongest gate NAND2X1
Warning 8: load of 158.368 is 2.74856 times greater than strongest gate NAND3X1
Warning 11: load of 195.764 is 3.35217 times greater than strongest gate NAND2X1
Warning 40: load of 469.413 is 7.8805 times greater than strongest gate DFFSR
75 gates exceed specified minimum load.
19 buffers were added.
15 gates were changed.

Gate counts by drive strength:

	"" gates	In: 37    	Out: 37    	+0
	"1" gates	In: 183    	Out: 168    	-15
	"2" gates	In: 32    	Out: 41    	+9

Number of gates changed: 34
gates resized: 34
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 13 (load 373.634) from node _38_,
driven by INVX4 with strength 228.066 (fF driven at latency 100)
Top fanout load-to-strength ratio is 3.74238 (latency = 374.238 ps)
Top input node fanout is 5 (load 186.957) from node SCK.
Warning 1: load of 383.634 is 1.65634 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 18: load of 109.319 is 1.87193 times greater than strongest gate NAND2X1
Warning 19: load of 167.7 is 2.91052 times greater than strongest gate NAND3X1
Warning 22: load of 195.764 is 3.35217 times greater than strongest gate NAND2X1
Warning 52: load of 210.262 is 3.52988 times greater than strongest gate DFFSR
Warning 58: load of 232.92 is 3.91026 times greater than strongest gate DFFSR
86 gates exceed specified minimum load.
0 buffers were added.
18 gates were changed.

Gate counts by drive strength:

	"" gates	In: 37    	Out: 37    	+0
	"1" gates	In: 173    	Out: 173    	+0
	"2" gates	In: 55    	Out: 40    	-15
	"4" gates	In: 5    	Out: 17    	+12
	"8" gates	In: 1    	Out: 4    	+3

Number of gates changed: 18
gates resized: 18
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 13 (load 373.634) from node _38_,
driven by INVX8 with strength 456.133 (fF driven at latency 100)
Top fanout load-to-strength ratio is 3.74238 (latency = 374.238 ps)
Top input node fanout is 5 (load 186.957) from node SCK.
Warning 1: load of 383.634 is 1.65634 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 6: load of 381.096 is 1.69385 times greater than strongest gate BUFX4
Warning 26: load of 109.319 is 1.87193 times greater than strongest gate NAND2X1
Warning 27: load of 167.7 is 2.91052 times greater than strongest gate NAND3X1
Warning 30: load of 195.764 is 3.35217 times greater than strongest gate NAND2X1
Warning 31: load of 197.378 is 3.39182 times greater than strongest gate NOR2X1
Warning 60: load of 210.262 is 3.52988 times greater than strongest gate DFFSR
Warning 66: load of 232.92 is 3.91026 times greater than strongest gate DFFSR
94 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 37    	Out: 37    	+0
	"1" gates	In: 173    	Out: 173    	+0
	"2" gates	In: 40    	Out: 40    	+0
	"4" gates	In: 17    	Out: 17    	+0
	"8" gates	In: 4    	Out: 4    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/ayush/vsdflow/outdir_spi_slave/synthesis
Files:
   Verilog: /home/ayush/vsdflow/outdir_spi_slave/synthesis/spi_slave.rtl.v
   Verilog: /home/ayush/vsdflow/outdir_spi_slave/synthesis/spi_slave.rtlnopwr.v
   Verilog: /home/ayush/vsdflow/outdir_spi_slave/synthesis/spi_slave.rtlbb.v
   Spice:   /home/ayush/vsdflow/outdir_spi_slave/synthesis/spi_slave.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f spi_slave.spc spi_slave.xspice

Synthesis script ended on Wednesday 10 February 2021 07:01:22 PM IST
